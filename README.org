#+TITLE: Metaflow-Flyte
#+AUTHOR: Jonathan Jin

Experiments in dispatching [[https://metaflow.org/][Metaflow]] flows to [[https://flyte.org/][Flyte]].

* Notes

** Extending Metaflow

   Metaflow has specific "extension points" built in. Any third-party package,
   such as ours, that conforms to their expected conventions and protocols will
   automatically get "injected" into `metaflow` top-level imports. This lets a
   package like ours define a custom decorator =FooDecorator= with name
   =@foo= and have it importable via:

   #+begin_src python
     from metaflow import foo
   #+end_src

   The same goes for CLI sub-commands, allowing us to define custom CLI trees
   such as =my_subcmd= and have them accessible from the typical =python
   my/metaflow/flow.py= command tree **with no user intervention**.

   Some more details here: [[https://github.com/Netflix/metaflow-extensions-template][Netflix/metaflow-extensions-template]].

   In general, the following observation holds particular value:

   #+begin_quote
   Metaflow allows for seamless "injection" of extensions without an associated
   need for wrapper CLIs, companion SDKs, or sub-classing of specialized types.
   #+end_quote

   The [[https://github.com/Netflix/metaflow-extensions-template#user-stories][user stories]] provided at [[https://github.com/Netflix/metaflow-extensions-template][Netflix/metaflow-extensions-template]] are
   particularly worth reading.

* TODO [1/4] Tasks

** DONE Create a local Flyte cluster

   First, install [[https://docs.flyte.org/projects/flytectl/en/latest/gen/flytectl.html#flytectl][=flytectl=]]:

   #+begin_src bash
     brew install flyteorg/homebrew-tap/flytectl
   #+end_src

   #+begin_src bash
     flytectl sandbox start --source .
   #+end_src

** TODO [0/5] Submit flow to Flyte cluster

   To register the workflow (WIP):

   #+begin_src bash
     python flows/00-skeleton.py flyte register
   #+end_src

   To execute the workflow (WIP):

   #+begin_src bash
     python flows/00-skeleton.py flyte compile
   #+end_src

   This doesn't do much currently; it:

   - Converts the Metaflow flow to an [[https://docs.flyte.org/projects/cookbook/en/latest/auto/core/flyte_basics/imperative_wf_style.html#sphx-glr-auto-core-flyte-basics-imperative-wf-style-py][imperatively defined]] Flyte workflow
     (though current "convert" just means create an empty Flyte workflow...);
   - Gets the [[https://docs.flyte.org/en/latest/concepts/launchplans.html#the-association-between-workflows-and-launchplans][default launch plan]] for that Flyte workflow.


   We plan to have it do the following:

   - [[https://docs.flyte.org/projects/flytekit/en/latest/generated/flytekit.remote.remote.FlyteRemote.html][Execute on a remote Flyte cluster]], mapping the project and branch from the
     [[https://docs.metaflow.org/going-to-production-with-metaflow/coordinating-larger-metaflow-projects#the-project-decorator][@project]] decorator to the Flyte [[https://docs.flyte.org/en/latest/concepts/projects.html][project]] and [[https://docs.flyte.org/en/latest/concepts/domains.html][domain]] respectively.
     
*** TODO Submit flow with only start/end w/ no external dependencies

*** TODO Submit flow with parameters

*** TODO Submit and execute flow

*** TODO Submit and set a schedule on a flow

    Could we use the Metaflow default [[https://docs.metaflow.org/going-to-production-with-metaflow/scheduling-metaflow-flows#scheduling-a-flow][@schedule]] decorator here? Or is that
    coupled to AWS Step?

** TODO Submit single step to Flyte cluster

** TODO [0/2] Reuse Metaflow default decorators for Flyte analogues

*** TODO [[https://docs.metaflow.org/metaflow/failures#retrying-tasks-with-the-retry-decorator][@retry]]

*** TODO [[https://docs.metaflow.org/metaflow/failures#timing-out-with-the-timeout-decorator][@timeout]]

* Out of Scope

  - Managing [[https://docs.flyte.org/en/latest/concepts/launchplans.html#divedeep-launchplans][launch plans]] associated w/ Metaflow flows
